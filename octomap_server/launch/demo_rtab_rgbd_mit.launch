<launch>
    <param name="/use_sim_time" value="true" />

    <!--Playing ROS bag w/ tf, must be together with others-->
    <arg name="bag_filenames"/>
    <node name="playbag" pkg="rosbag" type="play" args="--clock --rate=1 --keep-alive $(arg bag_filenames)"/>
    <!--node name="tf_remove_transform" pkg="cartographer_ros" type="tf_remove_transform.py"/-->

    <include file="$(find octomap_server)/launch/rtabmap.launch">
        <arg name="stereo"                    value="false"/>

        <!-- Choose visualization -->
        <arg name="rtabmapviz"              value="false" /> 
        <arg name="rviz"                    value="true" />

        <!-- Localization-only mode -->
        <arg name="localization"            value="false"/>

        <!-- sim time for convenience, if playing a rosbag -->
        <arg name="use_sim_time"            value="true"/>

        <!-- Corresponding config files -->
        <arg name="cfg"                     value="" /> <!-- To change RTAB-Map's parameters, set the path of config file (*.ini) generated by the standalone app -->
        <arg name="gui_cfg"                 value="~/.ros/rtabmap_gui.ini" />
        <arg name="rviz_cfg"                value="$(find rtabmap_ros)/launch/config/rgbd.rviz" />

        <arg name="frame_id"                value="base_footprint"/>     <!-- Fixed frame id, you may set "base_link" or "base_footprint" if they are published -->
        <arg name="odom_frame_id"           value=""/>                <!-- If set, TF is used to get odometry instead of the topic -->
        <arg name="map_frame_id"            value="map"/>
        <arg name="ground_truth_frame_id"   value=""/>     <!-- e.g., "world" -->
        <arg name="ground_truth_base_frame_id" value=""/>  <!-- e.g., "tracker", a fake frame matching the frame "frame_id" (but on different TF tree) -->
        <arg name="namespace"               value="rtabmap"/>
        <arg name="database_path"           value="~/.ros/rtabmap.db"/>
        <arg name="queue_size"              value="10"/>
        <arg name="wait_for_transform"      value="0.2"/>
        <arg name="args"                    value="--delete_db_on_start"/>  <!-- delete_db_on_start, udebug -->
        <arg name="launch_prefix"           value=""/>              <!-- for debugging purpose, it fills launch-prefix tag of the nodes -->
        <arg name="output"                  value="screen"/>        <!-- Control node output (screen or log) -->
        <arg name="publish_tf_map"          value="true"/>

        <!-- RGB-D related topics -->
        <arg name="rgb_topic"               value="/camera/rgb/image_raw" />
        <arg name="depth_topic"             value="/camera/depth/image_raw" />
        <arg name="camera_info_topic"       value="/camera/rgb/camera_info" />

        <!-- Already synchronized RGB-D related topic, with rtabmap_ros/rgbd_sync nodelet -->
        <arg name="rgbd_sync"               value="false"/>         <!-- pre-sync rgb_topic, depth_topic, camera_info_topic -->
        <arg name="approx_rgbd_sync"        value="true"/>          <!-- false=exact synchronization -->
        <!--arg name="subscribe_rgbd"          value="$(arg rgbd_sync)"/-->
        <arg name="rgbd_topic"              value="rgbd_image" />
        <arg name="depth_scale"             value="1.0" />         <!-- Deprecated, use rgbd_depth_scale instead -->
        <!--arg name="rgbd_depth_scale"        value="$(arg depth_scale)" /-->
        <arg name="rgbd_decimation"         value="1" />

        <arg name="compressed"              value="false"/>         <!-- If you want to subscribe to compressed image topics -->
        <arg name="rgb_image_transport"     value="compressed"/>    <!-- Common types: compressed, theora (see "rosrun image_transport list_transports") -->
        <arg name="depth_image_transport"   value="compressedDepth"/>  <!-- Depth compatible types: compressedDepth (see "rosrun image_transport list_transports") -->

        <arg name="subscribe_scan"          value="false"/>
        <arg name="scan_topic"              value="/scan"/>
        <arg name="subscribe_scan_cloud"    value="false"/>
        <arg name="scan_cloud_topic"        value="/scan_cloud"/>
        <arg name="subscribe_scan_descriptor" value="false"/>
        <arg name="scan_descriptor_topic"   value="/scan_descriptor"/>
        <arg name="scan_cloud_max_points"   value="0"/>
        <arg name="scan_cloud_filtered"     value="false"/> <!-- use filtered cloud from icp_odometry for mapping -->

        <arg name="visual_odometry"          value="true"/>          <!-- Launch rtabmap visual odometry node -->
        <arg name="icp_odometry"             value="false"/>         <!-- Launch rtabmap icp odometry node -->
        <arg name="odom_topic"               value="odom"/>          <!-- Odometry topic name -->
        <!--arg name="vo_frame_id"              value="$(arg odom_topic)"/--> <!-- Visual/Icp odometry frame ID for TF -->
        <arg name="publish_tf_odom"          value="true"/>
        <arg name="odom_tf_angular_variance" value="1"/>             <!-- If TF is used to get odometry, this is the value angular variance -->
        <arg name="odom_tf_linear_variance"  value="1"/>             <!-- If TF is used to get odometry, this is the value linear variance -->
        <!--arg name="odom_args"                value=""/-->              <!-- More arguments for odometry (overwrite same parameters in rtabmap_args) -->
        <arg name="odom_sensor_sync"         value="false"/>
        <arg name="odom_guess_frame_id"        value=""/>
        <arg name="odom_guess_min_translation" value="0"/>
        <arg name="odom_guess_min_rotation"    value="0"/>
        <arg name="odom_max_rate"            value="0"/>
        <arg name="odom_expected_rate"       value="0"/>
        <arg name="imu_topic"                value="/imu/data"/>          <!-- only used with VIO approaches -->
        <arg name="wait_imu_to_init"         value="false"/>

        <arg name="scan_cloud_assembling"              value="false"/>
        <arg name="scan_cloud_assembling_time"         value="1"/>
        <arg name="scan_cloud_assembling_fixed_frame"  value=""/>
        <arg name="scan_cloud_assembling_voxel_size"   value="0.05"/>
        <arg name="scan_cloud_assembling_noise_radius"   value="0.0"/>    <!-- 0=disabled -->
        <arg name="scan_cloud_assembling_noise_min_neighbors"   value="5"/>

        <arg name="subscribe_user_data"      value="false"/>             <!-- user data synchronized subscription -->
        <arg name="user_data_topic"          value="/user_data"/>
        <arg name="user_data_async_topic"    value="/user_data_async" /> <!-- user data async subscription (rate should be lower than map update rate) -->

        <arg name="gps_topic"                value="/gps/fix" />         <!-- gps async subscription -->
    </include>
</launch>
